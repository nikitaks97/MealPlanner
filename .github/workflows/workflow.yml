name: build and deploy client and server using CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with: 
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          path: node_modules
          restore-keys: ${{ runner.os }}-deps-
          
      - name: Install dependencies
        run: |
          npm install
        env:
          CI: false
          
      - name: Build client
        run: |
          npm run build:client
        env:
          CI: false
          
      - name: Upload Client Build
        uses: actions/upload-artifact@v4
        with:
          name: client-build       
          path: ./client/build/

  test:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with: 
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          path: node_modules
          restore-keys: ${{ runner.os }}-deps-
      - name: Install dependencies
        run: |
          npm install
        env:
          CI: false
          
      - name: Run tests
        run: |
          npm test
        env:
          CI: false

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with: 
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          path: node_modules
          restore-keys: ${{ runner.os }}-deps-
          
      - name: Install dependencies
        run: |
          npm install
        env:
          CI: false
          
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=nikitaks97_MealPlanner \
            -Dsonar.sources=. \
            -Dsonar.organization=nikitaks97 \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
          echo "SonarQube scan completed successfully!"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, sonarqube]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
        
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} << 'EOF'
            # Update system packages
            sudo yum update -y
            
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker $USER
            fi
            
            # Install Docker Compose if not already installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create application directory
            mkdir -p ~/mealplanner-app
            cd ~/mealplanner-app
            
            # Stop and remove existing containers
            if [ -f docker-compose.yml ]; then
              docker-compose down || true
            fi
            
            # Clean up old images
            docker system prune -f || true
          EOF
        
      - name: Copy application files to EC2
        run: |
          # Copy files to EC2
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:~/mealplanner-app/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r server/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:~/mealplanner-app/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r client/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:~/mealplanner-app/
        
      - name: Start application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} << 'EOF'
            cd ~/mealplanner-app
            
            # Build and start containers
            docker-compose up --build -d
            
            # Wait for containers to be healthy
            echo "Waiting for containers to start..."
            sleep 30
            
            # Check container status
            docker-compose ps
            
            # Test if application is running
            if curl -f http://localhost:5000/health > /dev/null 2>&1; then
              echo "‚úÖ Server is healthy and running"
            else
              echo "‚ùå Server health check failed"
              docker-compose logs server
              exit 1
            fi
            
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Client is running"
            else
              echo "‚ùå Client health check failed"
              docker-compose logs client
              exit 1
            fi
              echo "üöÄ Deployment completed successfully!"
            echo "Server available at: http://${{ secrets.EC2_IP }}:5000"
            echo "Client available at: http://${{ secrets.EC2_IP }}:3000"
          EOF











